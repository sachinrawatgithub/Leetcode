Q. Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
*/

1. Here the think is to how we are going to maintain the leading list have k nodes or not 
   just no need to do that just find kth node from curr node if kth node is NULL it means reverse of group is not possible.

2. can reverse k nodes but how to connect the group in correct order 
   2 things to do (1) to point group prev to kth node 
                  (2) to point group first node to group next 

- Maintain pointers such as group pre,group next,kth;
- also needed dummy node(NOT pointer)(WHY because we have to return and head will not be the same) which will be returned

class Solution {
public:
ListNode* travel(ListNode* temp,int k)
{
    while( temp && k)
    {
        temp=temp->next;
        k--;
    }
    return temp;
}
    
ListNode* reverseKGroup(ListNode* head, int k) 
{
   ListNode dummy = ListNode(0,head); 
   ListNode *groupPre = &dummy; 

    while(true)
    {
       ListNode* kth = travel(groupPre,k); 
       if(kth == NULL) // terminating cond if no kth node exits from curr node   
           break;
           
       ListNode* groupNxt = kth->next;
       
       ListNode *pre=groupNxt; // 1 points to 3 (frist ele of grp points to kth ele) LOOK the COMMENT below  
       ListNode*curr=groupPre->next, *forwd=curr;
        
        while(curr!=groupNxt)//reversal
        {
           forwd=curr->next;
           curr->next=pre; // here connection are being made
                          // when ever first iteration of loop run - the first node of grp points to kth node -
                         // after that is reversal of the group  
            pre=curr;
            curr=forwd;
        }
        
        ListNode *temp=groupPre->next;
        groupPre->next=kth; //group prev points to kth (dummy points to 2)
        groupPre=temp; // for the next round group pre is 1 because now list is 2 1 3 4 5
                        
        
    }
    return dummy.next;
}
    
    
};
