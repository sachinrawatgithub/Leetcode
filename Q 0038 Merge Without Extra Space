Given two sorted arrays arr1[] and arr2[] of sizes n and m in non-decreasing order. Merge them in sorted order without using any extra space. Modify arr1 so that it contains the first N elements and modify arr2 so that it contains the last M elements.
 

Example 1:

Input: 
n = 4, arr1[] = [1 3 5 7] 
m = 5, arr2[] = [0 2 6 8 9]
Output: 
arr1[] = [0 1 2 3]
arr2[] = [5 6 7 8 9]
Explanation:
After merging the two 
non-decreasing arrays, we get, 
0 1 2 3 5 6 7 8 9.
Example 2:

Input: 
n = 2, arr1[] = [10, 12] 
m = 3, arr2[] = [5 18 20]
Output: 
arr1[] = [5 10]
arr2[] = [12 18 20]
Explanation:
After merging two sorted arrays 
we get 5 10 12 18 20.

* SIMPLE look we need to sort the arrays in TC less than n^m and SC O(1)
* Suppose if in a1 we had all ele which it should have may be not in sorted order(WE can sort them indiviually TC-O(nlogn))
* So now problem reduce to how we can transfer ele in the correct array.
* we know some of last ele of a1 belongs to a2 and some of starting ele of a2 belong to a1 
* hence if we swap them we will succed.
* we need 3 pointer i,j,k => i=0, j=0 at start and k=n-1 at end of a1 so that
* i swap last of (kth)a1 to starting of (jth)a2
* now question arise till when i have to do this 
* when till i<=k {while (i <= k && j < m)} because after this no swap will ocurr 
* hence all ele are where they should be. 
 


void merge(int arr1[], int arr2[], int n, int m)
{
    int i = 0, j = 0, k = n - 1;
   
    // Until i less than equal to k
    // or j is less than m
    while (i <= k && j < m) {
        if (arr1[i] < arr2[j])
            i++;
        else {
            swap(arr2[j], arr1[k]);
            j++;
            k--;
        }
    }
   
    // Sort first array
    sort(arr1, arr1 + n);
   
    // Sort second array
    sort(arr2, arr2 + m);
}
