A parentheses string is valid if and only if:

It is the empty string,
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.

For example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))".
Return the minimum number of moves required to make s valid.

 

Example 1:

Input: s = "())"
Output: 1
Example 2:

Input: s = "((("
Output: 3

look (), ()(), (()), (()()) or any other with correct braket will not make any impact on our ans 

START WITH the smallest possible input
(  ans 1                ) ans 1
() ans 0                )( ans 2
(( ans 2                )) ans 2

()))) can be written as ))) ans 3             (((() can be written as ((( ans 3

so what is we doing is ( will cancle the count of ) if ( is found earlier to )
means (()  will say we have ( only 
and we can write this )))() as ))) and maintain there count as d=3 

and ans will be number of ( and ) in the end 

class Solution {
public:
int minAddToMakeValid(string s) 
{

  int o=0,c=0,d=0,ans=0;    
  for(int i=0;i<s.size();i++)
  {
    if(s[i]==')')
    {
        if(o==0)
        {
          d++;// counting ) when number of '(' is zero 
        }
        else if(o>0)
        {
            o--; // decreasig '(' count as we found ')' and we have seen '(' earlier         
        }
    }   
    else
    {
        o++;
    }
  }
  
  ans = d+o;


  return ans;   
  }
};

