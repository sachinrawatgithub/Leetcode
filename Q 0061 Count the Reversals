Given a string S consisting of only opening and closing curly brackets '{' and '}', find out the minimum number of reversals required to convert the string into a balanced expression.
A reversal means changing '{' to '}' or vice-versa.

Example 1:
Input:
S = "}{{}}{{{"
Output: 3
Explanation: One way to balance is:
"{{{}}{}}". There is no balanced sequence
that can be formed in lesser reversals.

Example 2:
Input: 
S = "{{}{{{}{{}}{{"
Output: -1
Explanation: There's no way we can balance
this sequence of braces.



look ->    }{ ans = 2
           }}}{  ans 3
           {{{}  ans 1
           
           {  ans  -1
           {{{ ans  -1
           } ans -1
           }}} ans -1
 
so we will not change the one who all ready in correct order
and we not solve this until { we have 
means }}  {{}{}}  {{{{
first 2 are } we ignore them and solve {{}{}} and ignore last {{{{ 
                                        
then we see to }} {{{{
so we had mintain a count of starting } as d =2  and extra { as o=4
so minimum would be ->  because }} are in even so one reversal and they become {}
then {{{{ same it take 2 also 

if it would be } {{{
then we need two reversal to make } { to {} hence 2
then {{  to {} in 1 reversal 


look   } {{}} {} {          
       this will eventually become  } { ans = 2
       
look   { { {}{}{} }  {
       this will eventually become { {   hence ans = 1
          
int countRev (string s)
{
  int o=0,c=0,d=0,rev=0;    
  for(int i=0;i<s.size();i++)
  {
    if(s[i]=='}')
    {
        if(o==0)
        {
          d++;// maintaining number of } when o=0
        }
        else if(o>0)
        {
            o--;
        }
    }   
    else
    {
        o++;
    }
  }
  
  if(d>1)
  {
    if(d%2==0)// case }} {}
    {
       rev+=d/2; 
       d=0; 
    }
    else // case } {}
    {
       rev+=(d-1)/2; 
       d=1;       
    }
  }
  
  if(d==1 && o>=d) // case } {{{
  {
      rev+=2; // for } { to {}
      o=o-d;// updating { we have now {{ only
      d=0;
  }
  else if(d==1 && o<d) // case }
  {
      return -1;
  }  
  
  if(o>0)// case }} or } 
  {
      if(o%2==0) 
       {
           rev+=o/2;
       }
      else
        return -1;
  }          
          
          
 
           
 
