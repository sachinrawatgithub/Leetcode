Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).
Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106



Approach :
Similar to the naive approach, instead of storing the final merged sorted array, we can keep a counter to keep track of the required position where the median will 
exist. First, using the median formula, get a position where the median will exist. Then, follow the above approach and instead of storing elements in another array,
we will increase the counter value. When the counter value is equal to the median positions, return element.

Time Complexity : O(m+n)
Reason – We are still traversing both the arrays linearly.
Space Complexity: O(1)
Reason – We do not use any extra array.


class Solution {
public:
double findMedianSortedArrays(vector<int>& a1, vector<int>& a2)
{
   int counter=0;
   int n1=a1.size(),n2=a2.size();
   int m1=-1,m2=-1; //to store the median for even odd case both 

   int i=0,j=0; //pointers
   while(i<n1 && j<n2)
   {
      if(a1[i] <= a2[j])
      {   
          counter++;
          m1= ((counter == ((n1+n2)/2))  ?  a1[i] : m1);
          m2= ((counter == ((n1+n2)/2 +1 )) ? a1[i] : m2);   
          i++;
      }
      else
      {
          counter++;
          m1= ((counter == ((n1+n2)/2))  ? a2[j] : m1);
          m2= ((counter == ((n1+n2)/2 +1)) ? a2[j] : m2);
          j++;
      }       
   }
    
   while(i<n1)
   {
     counter++;   
     m1= (counter == ((n1+n2)/2))  ? a1[i] : m1;
     m2= counter == (n1+n2)/2 +1  ? a1[i] : m2;  
     i++;
   }
    
   while(j<n2)
   {
     counter++;  
     m1= counter == (n1+n2)/2  ? a2[j] : m1;
     m2= counter == (n1+n2)/2 +1  ? a2[j] : m2;
     j++;   
   }
    
if( (n1+n2)%2==0)// when total length even then  use m1 and m2
    return (m1+m2)/2.0;
else // when length is odd we need only m2
    return m2;
    
}
};
