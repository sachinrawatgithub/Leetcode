Given two strings s1 and s2. The task is to check if s2 is a rotated version of the string s1. The characters in the strings are in lowercase.

 

Example 1:

Input:
geeksforgeeks
forgeeksgeeks
Output: 
1
Explanation: s1 is geeksforgeeks, s2 is
forgeeksgeeks. Clearly, s2 is a rotated
version of s1 as s2 can be obtained by
left-rotating s1 by 5 units.
 

Example 2:

Input:
mightandmagic
andmagicmigth
Output: 
0
Explanation: Here with any amount of
rotation s2 can't be obtained by s1.
 
 // making all rotation and then checking to s2 if it matches or not  
 class Solution
{
    public:
    //Function to check if two strings are rotations of each other or not.
    bool areRotations(string s1,string s2)
    {
        int n1=s1.size();
        int n2=s2.size();
        
        if(n1!=n2)
        return 0;
        
        int i,j=0,k=0,flag=0;
        while(k<n1)// k to check when 
        {
            i=j;
            int x=0,flag=0;
            
                do{
                    if(s1[(j%n1)]==s2[x])// j%n1 rotation 
                    {    
                      j++;
                      x++;
                    }
                    else
                    { 
                        flag=1;
                        break; 
                    }
                }while(j%n1!=i && x<n1);
                
                if(!flag)//matched when 0
                 return 1; 
                else
                 j=i; //else j=i so that rotation is start from next(j++ look below) 
                  
                 
        j++;
        k++;
        }
    
    return false;    
    }
};
