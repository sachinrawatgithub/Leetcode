Q. Given a linked list of size N. The task is to reverse every k nodes (where k is an input to the function) in the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should be considered as a group and must be reversed (See Example 2 for clarification).

Example 1:

Input:
LinkedList: 1->2->2->4->5->6->7->8
K = 4
Output: 4 2 2 1 8 7 6 5 
Explanation: 
The first 4 elements 1,2,2,4 are reversed first 
and then the next 4 elements 5,6,7,8. Hence, the 
resultant linked list is 4->2->2->1->8->7->6->5.
Example 2:

Input:
LinkedList: 1->2->3->4->5
K = 3
Output: 3 2 1 5 4 
Explanation: 
The first 3 elements are 1,2,3 are reversed 
first and then elements 4,5 are reversed.Hence, 
the resultant linked list is 3->2->1->5->4.


-Dummy node pointing to head because we need to return a new head(whih will be cal acc to k val)
-groupPre it act as pre in reversal of linked list of group  *it also point to dummy for the first iteration after that we make it point to another location
-counting length of the list and decrementing it by k 
-after all we reverse the remaning nodes 
- *points to remember iterative reversal 
* use three pointers 
* make first(pre) points to NULL
* checking while condt for curr
* 

class Solution
{
    public:
    int length(struct node *head)
    {
        int l=0;    
       while(head)
       {
           head=head->next;
           l++;
       }
       return l;
    }
    
    struct node *reverse (struct node *head, int k)
    { 
        node dummy = node(0);
        dummy.next=head;
        
        node* groupPre=&dummy;
        int l = length(head);
        int j=k;
        
        node *pre,*curr,*forwd;
        while(l>=k)
        {
            pre=groupPre; // as we know it always points to previ of grp
            curr=groupPre->next, forwd=curr->next; 
            while(j>1)
            {
               curr->next=forwd->next; // helping curr(grp first ele) to points grp next ele  
       reveral link - forwd->next=pre->next; //  forwd->next=curr but we are not moving curr(so in next iteration it will not work) that's why
       pre stay as it is(grp pre) but pre next points to forwd       pre->next=forwd;// helping grp pre to points kth node 
               forwd=curr->next;
                   
              j--;    
            }   
            // k=3    1 2 3 4 5 6 7 
            //        3 2 1 4 5 6 7 after one first grup reversal
            //        curr is still points to 1           
            
            groupPre=curr;
            j=k;
            l-=k;
        }
        
        if(l==0)
         return dummy.next;
     
        node* temp=curr;
        
        
        
        pre=forwd;
        curr=forwd->next;
        pre->next=NULL;
        while(curr!=NULL)
        {
            forwd=curr->next;
            curr->next=pre;
            pre=curr;
            curr=forwd;
        }
        temp->next=pre;
    
    return dummy.next;    
    }
};
