Given two sorted arrays arr1[] and arr2[] of sizes n and m in non-decreasing order. Merge them in sorted order without using any extra space. Modify arr1 so that it contains the first N elements and modify arr2 so that it contains the last M elements.
 

Example 1:

Input: 
n = 4, arr1[] = [1 3 5 7] 
m = 5, arr2[] = [0 2 6 8 9]
Output: 
arr1[] = [0 1 2 3]
arr2[] = [5 6 7 8 9]
Explanation:
After merging the two 
non-decreasing arrays, we get, 
0 1 2 3 5 6 7 8 9.
Example 2:

Input: 
n = 2, arr1[] = [10, 12] 
m = 3, arr2[] = [5 18 20]
Output: 
arr1[] = [5 10]
arr2[] = [12 18 20]
Explanation:
After merging two sorted arrays
we get 5 10 12 18 20.

* 2 pointer at beginning/last here i am doing it from last.
* while a1 last > a2 last we swap both of them now a1 is sorted hence 
* SHIVPOINT -noe [2 4 6 8(<-this side sorted) | 3 ] three need to be placed in its correct place 
* two think come in my mind 1.(Quick sort) partition 2. insertion sort 
* in partition array is totally unsorted BUT IN insertion one side is sorted array SAME situation as we are right now.

--HENCE use insertion sort -> BE CAUTIOUS WHEN comparing a[n-1] will change after some time hence it need to be stored in var(hole).   

Time Complexity: The worst-case time complexity of code/algorithm is O(m*n). The worst case occurs when all elements of ar1[] are greater than all elements of ar2[].

class Solution{
    public:
        
        void merge(long long a1[], long long a2[], int n, int m) 
        { 
         int i=n-1,j=m-1;
         while(j >= 0)// after this a2 will be sorted and a1 is sorted but the n-1 ele need to be place in its right position.
         {
            if(a1[n-1] > a2[j])
              swap(a1[n-1],a2[j]);
            else {
                j--;
                continue;
            } 
            
            i=n-1;
            int hole=a1[n-1];
            while(i > 0 && a1[i-1] > hole)// using insertion sort logic placing n-1 ele of a1 in its correct postion.
            {
                if(a1[i-1] > hole)
                  a1[i]=a1[i-1];
            i--; 
            }
            a1[i]=hole;
            
        j--;  
        } 
    }
};
