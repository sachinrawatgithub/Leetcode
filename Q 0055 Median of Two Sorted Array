Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106


Intuition :
hint that two arrays are sorted and we want elements from merged sorted arrays. If we look into the word “sorted arrays”, we can think of a binary solution. 
Hence, we move to an efficient solution using binary search. But how to apply binary search? Let’s look into the thought process.

We know that we will get answers only from the final merged sorted arrays.
We will partition both the arrays in such a way that the left half of the partition will contain elements, which will be there when we merge them, 
till the median element and rest in the other right half. This partitioning of both arrays will be done by binary search.

Approach :
We will do a binary search in one of the arrays which have a minimum size among the two. Firstly, calculate the median position with (n+1)/2. 
Point two-pointer, say low and high, equal to 0 and size of the array on which we are applying binary search respectively. 
Find the partition of the array. Check if the left half has a total number of elements equal to the median position. 
If not, get the remaining elements from the second array. Now, check if partitioning is valid.
This is only when l1<=r2 and l2<=r1. If valid, return max(l1,l2)(when odd number of elements present) else return (max(l1,l2)+min(r1,r2))/2.
If partitioning is not valid, move ranges. When l1>r2, move left and perform the above operations again. When l2>r2, move right and perform the above operations.


class Solution {
public:
double findMedianSortedArrays(vector<int>& a1, vector<int>& a2)
{
   if(a1.size() > a2.size() )// we apply binary search to smaller array(making a1 as smaller to generalize the code)
       return findMedianSortedArrays(a2,a1);

    int n1=a1.size(),n2=a2.size();
    int low=0,high=n1; // n1 represent cut(for more info look striver) thats why high=n1 insted of n1-1
    
    while(low<=high)//applying binary search
    {
       int cut1=(low+high)/2;
       int cut2=(n1+n2+1)/2-cut1; 
        
       int l1= cut1==0 ? INT_MIN : a1[cut1-1];
       int l2= cut2==0 ? INT_MIN : a2[cut2-1];
        
       int r1= cut1==n1 ? INT_MAX : a1[cut1];
       int r2= cut2==n2 ? INT_MAX : a2[cut2];
        
       if(l1 <= r2 && l2 <= r1)
       {
           if( (n1+n2)%2 == 0 )
               return (max(l1,l2) + min(r1,r2))/2.0;
           else
               return (max(l1,l2));
       }
       else if (l1 > r2)
       {
           high = cut1-1;
       }
       else
       {
           low = cut1+1;
       }
            
        
    }
    
return 0.0;
}
};
