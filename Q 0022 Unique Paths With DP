/* The task is to count all the possible paths from top left to bottom right of a m X n matrix with the constraints that from each cell you can either move 
   only to right or down.
 
   NOTE=>  You dont need to read input or print anything. Complete the function numberOfPaths() which takes m and n as input parameter and returns count all the 
   possible paths.The answer may be very large, compute the answer modulo 10^9 + 7.  
*/

//TC - O(m*n) because at max there can be m*n states hence max m*n recursion call, even if more recursion, my hash table will return the answer 
//SC - O(m*n)

class Solution {
public:

long long int path(int x,int y,int m,int n,vector<vector<long long int>> &dp)
{
    if(x>=m || y>=n)
      return 0;
    
    if(x==m-1 && y==n-1)
      return 1;
      
    if(dp[x][y]!=-1)
      return dp[x][y];
    else
      return dp[x][y]=( ( (path(x+1,y,m,n,dp)%1000000007) + (path(x,y+1,m,n,dp)%1000000007)   )%1000000007 );
}

long long int numberOfPaths(int m, int n)
{
    vector<vector<long long int>> dp;
    vector<long long int> v;
    
    for(int i=0;i<n;i++)
      v.push_back(-1);
    
    for(int i=0;i<m;i++)
      dp.push_back(v);
    
    return (((path(0,0,m,n,dp))%1000000007)); 
    
}
};
