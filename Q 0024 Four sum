/*
Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Example 2:
Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]

*/



 IMP -> CONCEPT  Q- 2sum=>2pointer approach  Q- 4sum=> two loop & 2pointer approach 
//TC - O(n^3) -> two loop & 2pointer approach

class Solution {
public:
vector<vector<int>> fourSum(vector<int>& nums, int target) 
{
   sort(nums.begin(),nums.end()); 
   vector<vector<int>> v;
   int n=nums.size(); 
   
   for(int i=0;i<n;i++)
   {
     for(int j=i+1;j<n;j++)
     {
         long long int  front=j+1,back=n-1;
         long long int target2=(long)(target-nums[i])-nums[j];
         while(front<back)
         {
             long twosum = nums[front]+nums[back];
             if(target2 > twosum)
             {
                 front++;
             }
             else if(target2 < twosum)
             {
                 back--;
             }
             else
             {
               vector<int> quad;
                 quad.push_back(nums[i]);  
                 quad.push_back(nums[j]);
                 quad.push_back(nums[front]);//quad[2]
                 quad.push_back(nums[back]);
                 v.push_back(quad);
                 
                 // we want all unique quads hence 
                 //   i j
                 //   1 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5   target = 9
                 //           F                     B   our first quad{ 1 1 2 5 }
                 //   i j           F         B         F,B ignoring dublicate val hence we got unique quad { 1 1 3 4 }
                 
                 // now after this F>B hence we will come out of while loop and now j will ignore the dublicate and so on ...
                 
                 while(front<back && nums[front]==quad[2]) // Processing the duplicates of number 3
                     front++;
                 
                 while(back>front && nums[back]==quad[3]) // Processing the duplicates of number 4
                     back--;
             }
         }
         
     while(j+1<n && nums[j]==nums[j+1]) // Processing the duplicates of number 2
            j++;       
     }
     
       
     while(i+1<n && nums[i]==nums[i+1]) // Processing the duplicates of number 1
         i++;
   
   }
    
return v;    
}
};
