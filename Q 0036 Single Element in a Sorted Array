You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

NOTE : Your solution must run in O(log n) time and O(1) space.
Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10

* Divide array in half check if mid(check its right and left != to it) is the ans return a[mid] IF NOT
* Hame ans us side mile ga jha ARRAY ka SIZE ODD hoga After removing MID AND ITS EQUIVALENT val


class Solution {
public:
    int singleNonDuplicate(vector<int>& a)
    {
       int l=0, h=a.size()-1;

       while(l<=h)
       {   int n=h-l+1;
           int mid=(l+h)/2;
           
           if( n==1 || (a[mid]!=a[mid-1] && a[mid]!=a[mid+1]) )
           {
              return a[mid];        
           }
           else if(a[mid]==a[mid-1] ) 
           {
               if(mid-2-l +1> 0 && (mid-2-l+1)%2==1 )// h-l+1==> (mid-2)-l +1 //checking left side of mid after removing mid-1 
                     h=mid-2;
               else// if left side is not correct then 100% right side
                   l=mid+1;;
           }
           else if(a[mid]==a[mid+1])//else 
           {
               if(h-mid+2+1> 0 && (h-mid+2+1)%2==1 )// h-l+1 ==> h-(mid+2) +1 //checking right side of mid after removing mid+1  
                     l=mid+2;
               else// if right side is not correct then 100% left side
                   h=mid-1;
           }    
        
       }
     return -1;      
    }
};
