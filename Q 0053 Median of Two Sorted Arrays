Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:
nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106


***************************************************   USE CONCEPT LEARN IN PREVIOUS problem  -> merge without space in O(nlogn)  ***************************************
//TIME COMPLEXITY -> nlogn     it can be improved to  O(logn) 

class Solution {
public:
double findMedianSortedArrays(vector<int>& a1, vector<int>& a2)
{
   int n=a1.size(),m=a2.size();
   int i=0,j=0,k=n-1;//three pointers 
  
   while(n!=0 && m!=0 && i<=k && j<m)//placing ele to its correct array
   {
       if(a1[i] > a2[j])
       {
           swap(a1[k],a2[j]);
           j++;
           k--;  
       }
       else
       {
           i++;
       }
   }
    
   sort(a1.begin(),a1.end());
   sort(a2.begin(),a2.end());
  
  
 //finding MEDIAN after merge 
 
 int count=-1;
 float ans=0.0;
 if( (n+m)%2 == 0)
 {
     for(int i=0;i<n;i++)
     {
         count++;
         if(count == (n+m-1)/2 || count == (n+m)/2  )
         {
             ans+=a1[i];
         }
     }
     
     for(int i=0;i<m;i++)
     {
         count++;
         if(count == (n+m-1)/2 || count == (n+m)/2  )
         {
             ans+=a2[i];
         }
     }
     
 return (ans/2);    
 }
 else
 {
    for(int i=0;i<n;i++)
     {
         count++;
         if(count == (n+m)/2 )
         {
             ans+=a1[i];
         }
     }
     
     for(int i=0;i<m;i++)
     {
         count++;
         if(count == (n+m)/2 )
         {
             ans+=a2[i];
         }
     } 
     
 return ans;    
 }
 

return 0;       
}
};
